require 'rubygems'
require 'trollop'
require 'navigator.rb'
require 'scanmodel.rb'
require 'scanservicemodel.rb'
require 'primitivedefines.rb'
require 'DataType.rb'
require 'DataTypeClass.rb'
require 'Enum.rb'
require 'Error.rb'
require 'MakeIntrospect.rb'
require 'MakeAdaptorImp'
require 'MakeProxyImp'
require 'rexml/document'
require 'libxml'
#require 'introspect'
require 'MakeServerH.rb'
require 'MakeClientH.rb'
require 'rubyscript2exe'
require 'MakeServerCPP.rb'
require 'MakeClientCPP.rb'
#require 'treetop'
#require 'signatureparser.rb'
include REXML




$bindingToolRel=ENV['BindingToolRel'].nil? ? "-NOT LEGAL RELEASE-" : ENV['BindingToolRel']
opts = Trollop::options do
   version "BindingTool #{$bindingToolRel} (c) 2009 Akhela Srl (Antonio Cafiero)"
   banner <<-EOS
   BindingTool.
   Usage:
   BindingTool [options]
   where [options] are:
   EOS

   opt :ClassName, "Root Name for Classes and Files", :default => "DefaultRoot"
   opt :InFile, "Description File", :default => "DefaultFile"
   opt :OutDir, "Output Directory", :default => ""
   opt :Test, "Test", :default => "not"
end


$MarelliNamespace="com_MM"
$outdir=opts[:OutDir]
$rootname=opts[:ClassName]
doc = LibXML::XML::Document.file(opts[:InFile])
schema = LibXML::XML::Schema.new("../Schema/NewIntrospect.xsd")
result = doc.validate_schema(schema) do |message,flag|
	log.debug(message)
	puts message
end
dBUSxmlFilename="#{opts[:OutDir]}#{opts[:ClassName]}_introspect.xml"
descriptionfile = File.open(opts[:InFile])
$newdescription = Document.new descriptionfile
$stddescription = Document.new
$stddescription << XMLDecl.new
if (opts[:Test] != "not") then
	puts "Test"
end
$includeFileOut = File.open("#{opts[:ClassName]}_dataType.h","w")
header = <<SINGLE_QUOTED
/*
 *	This file was automatically generated by BindingTool; DO NOT EDIT!
 *  Code produced automatically widh BindingTool Rel. #{$bindingToolRel}
 */
#ifndef __BindingTool__#{$rootname}_dataType_h
#define __BindingTool__#{$rootname}_dataType_h

SINGLE_QUOTED

#Make ..dataType.h
$includeFileOut.puts header
$includeFileOut.puts Primitivedefine
introspect = File.open(dBUSxmlFilename,"w")
enum=Enum.new($newdescription.root)
enum.iterate('Enum')
error=Error.new($newdescription.root)
error.iterate('Error')
datatype=DataType.new($newdescription.root)
datatype.iterate('DataType')
datatypeclass=DataTypeClass.new($newdescription.root)
datatypeclass.iterate('DataType')
footer = <<SINGLE_QUOTED
#endif /* __BindingTool__#{$rootname}_dataType_h */

SINGLE_QUOTED

$includeFileOut.puts footer
$includeFileOut.close
#end Make ..dataType.h


#Make ..introspect.xml
service=MakeIntrospect.new($newdescription.root)
service.iterate('Service')
#end Make ..introspect.xml

#Make ....proxy.h , adaptor.h
$stddescription.write(introspect, 1, false, false)
introspect.close
command = "dbusxx-xml2cpp.exe #{dBUSxmlFilename} --proxy=#{opts[:OutDir]}#{opts[:ClassName]}_proxy.h --adaptor=#{opts[:OutDir]}#{opts[:ClassName]}_adaptor.h "
puts command
stringResult = system(command)
#end Make ....proxy.h , adaptor.h

#Make ..adaptor_imp.h
adaptorImp=MakeAdaptorImp.new($newdescription.root)
adaptorImp.iterate('Service')

#Make ..proxy_imp.h
proxyImp=MakeProxyImp.new($newdescription.root)
proxyImp.iterate('Service')

#Make ..server.h
MakeServerH(opts[:ClassName], $newdescription.root, opts[:OutDir])

#Make ..client.h
MakeClientH(opts[:ClassName], $newdescription.root, opts[:OutDir])

#Make ..SERVER.cpp
MakeServerCPP(opts[:ClassName],opts[:OutDir])

#Make ..CLIENT.cpp
MakeClientCPP(opts[:ClassName],opts[:OutDir])
