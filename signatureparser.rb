# Autogenerated from a Treetop grammar. Edits may be lost.


module Signature
  include Treetop::Runtime

  def root
    @root || :item
  end

  def _nt_item
    start_index = index
    if node_cache[:item].has_key?(index)
      cached = node_cache[:item][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    r1 = _nt_element
    if r1
      r0 = r1
    else
      r2 = _nt_array
      if r2
        r0 = r2
      else
        r3 = _nt_struct
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:item][start_index] = r0

    r0
  end

  module Struct0
    def list
      elements[1]
    end

  end

  module Struct1
			def value
				"::DBus::Struct< #{list.value} >"
			end
  end

  def _nt_struct
    start_index = index
    if node_cache[:struct].has_key?(index)
      cached = node_cache[:struct][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_list
      s0 << r2
      if r2
        if has_terminal?(')', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Struct0)
      r0.extend(Struct1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:struct][start_index] = r0

    r0
  end

  module List0
    def item
      elements[0]
    end

    def list
      elements[1]
    end
  end

  module List1
			def value
				"#{item.value}, #{list.value}"
			end
  end

  def _nt_list
    start_index = index
    if node_cache[:list].has_key?(index)
      cached = node_cache[:list][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_item
    s1 << r2
    if r2
      r3 = _nt_list
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(List0)
      r1.extend(List1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r4 = _nt_item
      if r4
        r0 = r4
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:list][start_index] = r0

    r0
  end

  module Array0
    def item
      elements[1]
    end
  end

  module Array1
			def value
				"std::vector< #{item.value} >"
			end
  end

  def _nt_array
    start_index = index
    if node_cache[:array].has_key?(index)
      cached = node_cache[:array][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('a', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('a')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_item
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Array0)
      r0.extend(Array1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array][start_index] = r0

    r0
  end

  module Element0
			def value
				"uint8_t"
			end
  end

  module Element1
			def value
				"bool"
			end
  end

  module Element2
			def value
				"int16_t"
			end
  end

  module Element3
			def value
				"uint16_t"
			end
  end

  module Element4
			def value
				"int32_t"
			end
  end

  module Element5
			def value
				"uint32_t"
			end
  end

  module Element6
			def value
				"int64_t"
			end
  end

  module Element7
			def value
				"uint64_t"
			end
  end

  module Element8
			def value
				"double"
			end
  end

  module Element9
			def value
				"std::string"
			end
  end

  def _nt_element
    start_index = index
    if node_cache[:element].has_key?(index)
      cached = node_cache[:element][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    if has_terminal?('y', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      r1.extend(Element0)
      @index += 1
    else
      terminal_parse_failure('y')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('b', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        r2.extend(Element1)
        @index += 1
      else
        terminal_parse_failure('b')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('n', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          r3.extend(Element2)
          @index += 1
        else
          terminal_parse_failure('n')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('q', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            r4.extend(Element3)
            @index += 1
          else
            terminal_parse_failure('q')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('i', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              r5.extend(Element4)
              @index += 1
            else
              terminal_parse_failure('i')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('u', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                r6.extend(Element5)
                @index += 1
              else
                terminal_parse_failure('u')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('x', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  r7.extend(Element6)
                  @index += 1
                else
                  terminal_parse_failure('x')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('t', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    r8.extend(Element7)
                    @index += 1
                  else
                    terminal_parse_failure('t')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('d', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      r9.extend(Element8)
                      @index += 1
                    else
                      terminal_parse_failure('d')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('s', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        r10.extend(Element9)
                        @index += 1
                      else
                        terminal_parse_failure('s')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:element][start_index] = r0

    r0
  end

end

class SignatureParser < Treetop::Runtime::CompiledParser
  include Signature
end

